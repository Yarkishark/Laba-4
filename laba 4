"""С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E заполняется 
случайным образом целыми числами в интервале [-10,10]. Для отладки использовать не случайное заполнение, а целенаправленное. Вид матрицы А: 
Для ИСТд-12	
Е	В
D	С
Для простоты все индексы в подматрицах относительные. 
По сформированной матрице F (или ее частям) необходимо вывести не менее 3 разных графиков.
Программа должна использовать функции библиотек numpy  и mathplotlib
Формируется матрица F следующим образом: скопировать в нее А и  если в Е количество чисел, больших К в четных столбцах больше, чем сумма чисел в нечетных строках, то поменять местами С и Е симметрично, 
иначе В и С поменять местами несимметрично. При этом матрица А не меняется. После чего если определитель матрицы А больше суммы диагональных элементов матрицы F, 
то вычисляется выражение: A*AT – K * FТ, иначе вычисляется выражение (AТ +G-1-F-1)*K, где G-нижняя треугольная матрица, полученная из А. 
Выводятся по мере формирования А, F и все матричные операции последовательно."""

import numpy as np
import matplotlib.pyplot as plt

def generate_matrix(N):
    return np.random.randint(-10, 10, size=(N, N))

def plot_matrix(matrix, title):
    plt.imshow(matrix, cmap='viridis', interpolation='nearest')
    plt.title(title)
    plt.colorbar()
    plt.show()

def main():
    K = int(input("Введите значение K: "))
    N = int(input("Введите размерность матрицы N: "))

    A = generate_matrix(N)
    print("Матрица A:")
    print(A)
    plot_matrix(A, 'Матрица A')

    B, C, D, E = np.hsplit(A, 4)

    count_e_gt_K = np.sum(E > K)
    sum_odd_rows_c = np.sum(C[1::2])
    if count_e_gt_K > sum_odd_rows_c:
        C, E = E, C
    else:
        B, C = C, B

    F = np.hstack((B, C, D, E))
    print("Матрица F:")
    print(F)
    plot_matrix(F, 'Матрица F')

    if np.linalg.det(A) > np.sum(np.diagonal(F)):
        result = np.dot(A, A.T) - K * F.T
        print("A*AT - K*FТ:")
        print(result)
    else:
        G = np.tril(A)
        result = (np.dot(A.T, G) - 1 - np.linalg.inv(F.T) - 1) * K
        print("(AТ+G-1-F-1)*K:")
        print(result)

if __name__ == "__main__":
    main()
